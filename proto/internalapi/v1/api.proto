syntax = "proto3";

package internalapi.v1;

import "internalapi/v1/command.proto";
import "internalapi/v1/event.proto";

option go_package = "git.netflux.io/rob/octoplex/internal/generated/grpc/internalapi/v1";

service APIService {
  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse);
  rpc Communicate(stream Envelope) returns (stream Envelope);
  rpc ListDestinations(ListDestinationsRequest) returns (ListDestinationsResponse);
  rpc AddDestination(AddDestinationRequest) returns (AddDestinationResponse);
  rpc UpdateDestination(UpdateDestinationRequest) returns (UpdateDestinationResponse);
  rpc RemoveDestination(RemoveDestinationRequest) returns (RemoveDestinationResponse);
  rpc StartDestination(StartDestinationRequest) returns (StartDestinationResponse);
  rpc StopDestination(StopDestinationRequest) returns (StopDestinationResponse);
}

message AuthenticateRequest {}

message AuthenticateResponse {}

message Envelope {
  oneof payload {
    Command command = 1;
    Event event = 2;
  }
}

message ListDestinationsRequest {
  ListDestinationsCommand command = 1;
}

message ListDestinationsResponse {
  oneof result {
    DestinationsListedEvent ok = 1;
    ListDestinationsFailedEvent error = 2;
  }
}

message AddDestinationRequest {
  AddDestinationCommand command = 1;
}

message AddDestinationResponse {
  oneof result {
    DestinationAddedEvent ok = 1;
    AddDestinationFailedEvent error = 2;
  }
}

message UpdateDestinationRequest {
  UpdateDestinationCommand command = 1;
}

message UpdateDestinationResponse {
  oneof result {
    DestinationUpdatedEvent ok = 1;
    UpdateDestinationFailedEvent error = 2;
  }
}

message RemoveDestinationRequest {
  RemoveDestinationCommand command = 1;
}

message RemoveDestinationResponse {
  oneof result {
    DestinationRemovedEvent ok = 2;
    RemoveDestinationFailedEvent error = 3;
  }
}

message StartDestinationRequest {
  StartDestinationCommand command = 1;
}

message StartDestinationResponse {
  oneof result {
    DestinationStartedEvent ok = 1;
    StartDestinationFailedEvent error = 2;
  }
}

message StopDestinationRequest {
  StopDestinationCommand command = 1;
}

message StopDestinationResponse {
  oneof result {
    DestinationStoppedEvent ok = 1;
    StopDestinationFailedEvent error = 2;
  }
}
