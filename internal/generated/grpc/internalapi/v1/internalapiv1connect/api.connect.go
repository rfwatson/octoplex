// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: internalapi/v1/api.proto

package internalapiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "git.netflux.io/rob/octoplex/internal/generated/grpc/internalapi/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// APIServiceName is the fully-qualified name of the APIService service.
	APIServiceName = "internalapi.v1.APIService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// APIServiceCommunicateProcedure is the fully-qualified name of the APIService's Communicate RPC.
	APIServiceCommunicateProcedure = "/internalapi.v1.APIService/Communicate"
	// APIServiceListDestinationsProcedure is the fully-qualified name of the APIService's
	// ListDestinations RPC.
	APIServiceListDestinationsProcedure = "/internalapi.v1.APIService/ListDestinations"
	// APIServiceAddDestinationProcedure is the fully-qualified name of the APIService's AddDestination
	// RPC.
	APIServiceAddDestinationProcedure = "/internalapi.v1.APIService/AddDestination"
	// APIServiceUpdateDestinationProcedure is the fully-qualified name of the APIService's
	// UpdateDestination RPC.
	APIServiceUpdateDestinationProcedure = "/internalapi.v1.APIService/UpdateDestination"
	// APIServiceRemoveDestinationProcedure is the fully-qualified name of the APIService's
	// RemoveDestination RPC.
	APIServiceRemoveDestinationProcedure = "/internalapi.v1.APIService/RemoveDestination"
	// APIServiceStartDestinationProcedure is the fully-qualified name of the APIService's
	// StartDestination RPC.
	APIServiceStartDestinationProcedure = "/internalapi.v1.APIService/StartDestination"
	// APIServiceStopDestinationProcedure is the fully-qualified name of the APIService's
	// StopDestination RPC.
	APIServiceStopDestinationProcedure = "/internalapi.v1.APIService/StopDestination"
)

// APIServiceClient is a client for the internalapi.v1.APIService service.
type APIServiceClient interface {
	Communicate(context.Context) *connect.BidiStreamForClient[v1.Envelope, v1.Envelope]
	ListDestinations(context.Context, *connect.Request[v1.ListDestinationsRequest]) (*connect.Response[v1.ListDestinationsResponse], error)
	AddDestination(context.Context, *connect.Request[v1.AddDestinationRequest]) (*connect.Response[v1.AddDestinationResponse], error)
	UpdateDestination(context.Context, *connect.Request[v1.UpdateDestinationRequest]) (*connect.Response[v1.UpdateDestinationResponse], error)
	RemoveDestination(context.Context, *connect.Request[v1.RemoveDestinationRequest]) (*connect.Response[v1.RemoveDestinationResponse], error)
	StartDestination(context.Context, *connect.Request[v1.StartDestinationRequest]) (*connect.Response[v1.StartDestinationResponse], error)
	StopDestination(context.Context, *connect.Request[v1.StopDestinationRequest]) (*connect.Response[v1.StopDestinationResponse], error)
}

// NewAPIServiceClient constructs a client for the internalapi.v1.APIService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAPIServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) APIServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	aPIServiceMethods := v1.File_internalapi_v1_api_proto.Services().ByName("APIService").Methods()
	return &aPIServiceClient{
		communicate: connect.NewClient[v1.Envelope, v1.Envelope](
			httpClient,
			baseURL+APIServiceCommunicateProcedure,
			connect.WithSchema(aPIServiceMethods.ByName("Communicate")),
			connect.WithClientOptions(opts...),
		),
		listDestinations: connect.NewClient[v1.ListDestinationsRequest, v1.ListDestinationsResponse](
			httpClient,
			baseURL+APIServiceListDestinationsProcedure,
			connect.WithSchema(aPIServiceMethods.ByName("ListDestinations")),
			connect.WithClientOptions(opts...),
		),
		addDestination: connect.NewClient[v1.AddDestinationRequest, v1.AddDestinationResponse](
			httpClient,
			baseURL+APIServiceAddDestinationProcedure,
			connect.WithSchema(aPIServiceMethods.ByName("AddDestination")),
			connect.WithClientOptions(opts...),
		),
		updateDestination: connect.NewClient[v1.UpdateDestinationRequest, v1.UpdateDestinationResponse](
			httpClient,
			baseURL+APIServiceUpdateDestinationProcedure,
			connect.WithSchema(aPIServiceMethods.ByName("UpdateDestination")),
			connect.WithClientOptions(opts...),
		),
		removeDestination: connect.NewClient[v1.RemoveDestinationRequest, v1.RemoveDestinationResponse](
			httpClient,
			baseURL+APIServiceRemoveDestinationProcedure,
			connect.WithSchema(aPIServiceMethods.ByName("RemoveDestination")),
			connect.WithClientOptions(opts...),
		),
		startDestination: connect.NewClient[v1.StartDestinationRequest, v1.StartDestinationResponse](
			httpClient,
			baseURL+APIServiceStartDestinationProcedure,
			connect.WithSchema(aPIServiceMethods.ByName("StartDestination")),
			connect.WithClientOptions(opts...),
		),
		stopDestination: connect.NewClient[v1.StopDestinationRequest, v1.StopDestinationResponse](
			httpClient,
			baseURL+APIServiceStopDestinationProcedure,
			connect.WithSchema(aPIServiceMethods.ByName("StopDestination")),
			connect.WithClientOptions(opts...),
		),
	}
}

// aPIServiceClient implements APIServiceClient.
type aPIServiceClient struct {
	communicate       *connect.Client[v1.Envelope, v1.Envelope]
	listDestinations  *connect.Client[v1.ListDestinationsRequest, v1.ListDestinationsResponse]
	addDestination    *connect.Client[v1.AddDestinationRequest, v1.AddDestinationResponse]
	updateDestination *connect.Client[v1.UpdateDestinationRequest, v1.UpdateDestinationResponse]
	removeDestination *connect.Client[v1.RemoveDestinationRequest, v1.RemoveDestinationResponse]
	startDestination  *connect.Client[v1.StartDestinationRequest, v1.StartDestinationResponse]
	stopDestination   *connect.Client[v1.StopDestinationRequest, v1.StopDestinationResponse]
}

// Communicate calls internalapi.v1.APIService.Communicate.
func (c *aPIServiceClient) Communicate(ctx context.Context) *connect.BidiStreamForClient[v1.Envelope, v1.Envelope] {
	return c.communicate.CallBidiStream(ctx)
}

// ListDestinations calls internalapi.v1.APIService.ListDestinations.
func (c *aPIServiceClient) ListDestinations(ctx context.Context, req *connect.Request[v1.ListDestinationsRequest]) (*connect.Response[v1.ListDestinationsResponse], error) {
	return c.listDestinations.CallUnary(ctx, req)
}

// AddDestination calls internalapi.v1.APIService.AddDestination.
func (c *aPIServiceClient) AddDestination(ctx context.Context, req *connect.Request[v1.AddDestinationRequest]) (*connect.Response[v1.AddDestinationResponse], error) {
	return c.addDestination.CallUnary(ctx, req)
}

// UpdateDestination calls internalapi.v1.APIService.UpdateDestination.
func (c *aPIServiceClient) UpdateDestination(ctx context.Context, req *connect.Request[v1.UpdateDestinationRequest]) (*connect.Response[v1.UpdateDestinationResponse], error) {
	return c.updateDestination.CallUnary(ctx, req)
}

// RemoveDestination calls internalapi.v1.APIService.RemoveDestination.
func (c *aPIServiceClient) RemoveDestination(ctx context.Context, req *connect.Request[v1.RemoveDestinationRequest]) (*connect.Response[v1.RemoveDestinationResponse], error) {
	return c.removeDestination.CallUnary(ctx, req)
}

// StartDestination calls internalapi.v1.APIService.StartDestination.
func (c *aPIServiceClient) StartDestination(ctx context.Context, req *connect.Request[v1.StartDestinationRequest]) (*connect.Response[v1.StartDestinationResponse], error) {
	return c.startDestination.CallUnary(ctx, req)
}

// StopDestination calls internalapi.v1.APIService.StopDestination.
func (c *aPIServiceClient) StopDestination(ctx context.Context, req *connect.Request[v1.StopDestinationRequest]) (*connect.Response[v1.StopDestinationResponse], error) {
	return c.stopDestination.CallUnary(ctx, req)
}

// APIServiceHandler is an implementation of the internalapi.v1.APIService service.
type APIServiceHandler interface {
	Communicate(context.Context, *connect.BidiStream[v1.Envelope, v1.Envelope]) error
	ListDestinations(context.Context, *connect.Request[v1.ListDestinationsRequest]) (*connect.Response[v1.ListDestinationsResponse], error)
	AddDestination(context.Context, *connect.Request[v1.AddDestinationRequest]) (*connect.Response[v1.AddDestinationResponse], error)
	UpdateDestination(context.Context, *connect.Request[v1.UpdateDestinationRequest]) (*connect.Response[v1.UpdateDestinationResponse], error)
	RemoveDestination(context.Context, *connect.Request[v1.RemoveDestinationRequest]) (*connect.Response[v1.RemoveDestinationResponse], error)
	StartDestination(context.Context, *connect.Request[v1.StartDestinationRequest]) (*connect.Response[v1.StartDestinationResponse], error)
	StopDestination(context.Context, *connect.Request[v1.StopDestinationRequest]) (*connect.Response[v1.StopDestinationResponse], error)
}

// NewAPIServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAPIServiceHandler(svc APIServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aPIServiceMethods := v1.File_internalapi_v1_api_proto.Services().ByName("APIService").Methods()
	aPIServiceCommunicateHandler := connect.NewBidiStreamHandler(
		APIServiceCommunicateProcedure,
		svc.Communicate,
		connect.WithSchema(aPIServiceMethods.ByName("Communicate")),
		connect.WithHandlerOptions(opts...),
	)
	aPIServiceListDestinationsHandler := connect.NewUnaryHandler(
		APIServiceListDestinationsProcedure,
		svc.ListDestinations,
		connect.WithSchema(aPIServiceMethods.ByName("ListDestinations")),
		connect.WithHandlerOptions(opts...),
	)
	aPIServiceAddDestinationHandler := connect.NewUnaryHandler(
		APIServiceAddDestinationProcedure,
		svc.AddDestination,
		connect.WithSchema(aPIServiceMethods.ByName("AddDestination")),
		connect.WithHandlerOptions(opts...),
	)
	aPIServiceUpdateDestinationHandler := connect.NewUnaryHandler(
		APIServiceUpdateDestinationProcedure,
		svc.UpdateDestination,
		connect.WithSchema(aPIServiceMethods.ByName("UpdateDestination")),
		connect.WithHandlerOptions(opts...),
	)
	aPIServiceRemoveDestinationHandler := connect.NewUnaryHandler(
		APIServiceRemoveDestinationProcedure,
		svc.RemoveDestination,
		connect.WithSchema(aPIServiceMethods.ByName("RemoveDestination")),
		connect.WithHandlerOptions(opts...),
	)
	aPIServiceStartDestinationHandler := connect.NewUnaryHandler(
		APIServiceStartDestinationProcedure,
		svc.StartDestination,
		connect.WithSchema(aPIServiceMethods.ByName("StartDestination")),
		connect.WithHandlerOptions(opts...),
	)
	aPIServiceStopDestinationHandler := connect.NewUnaryHandler(
		APIServiceStopDestinationProcedure,
		svc.StopDestination,
		connect.WithSchema(aPIServiceMethods.ByName("StopDestination")),
		connect.WithHandlerOptions(opts...),
	)
	return "/internalapi.v1.APIService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case APIServiceCommunicateProcedure:
			aPIServiceCommunicateHandler.ServeHTTP(w, r)
		case APIServiceListDestinationsProcedure:
			aPIServiceListDestinationsHandler.ServeHTTP(w, r)
		case APIServiceAddDestinationProcedure:
			aPIServiceAddDestinationHandler.ServeHTTP(w, r)
		case APIServiceUpdateDestinationProcedure:
			aPIServiceUpdateDestinationHandler.ServeHTTP(w, r)
		case APIServiceRemoveDestinationProcedure:
			aPIServiceRemoveDestinationHandler.ServeHTTP(w, r)
		case APIServiceStartDestinationProcedure:
			aPIServiceStartDestinationHandler.ServeHTTP(w, r)
		case APIServiceStopDestinationProcedure:
			aPIServiceStopDestinationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAPIServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAPIServiceHandler struct{}

func (UnimplementedAPIServiceHandler) Communicate(context.Context, *connect.BidiStream[v1.Envelope, v1.Envelope]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("internalapi.v1.APIService.Communicate is not implemented"))
}

func (UnimplementedAPIServiceHandler) ListDestinations(context.Context, *connect.Request[v1.ListDestinationsRequest]) (*connect.Response[v1.ListDestinationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internalapi.v1.APIService.ListDestinations is not implemented"))
}

func (UnimplementedAPIServiceHandler) AddDestination(context.Context, *connect.Request[v1.AddDestinationRequest]) (*connect.Response[v1.AddDestinationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internalapi.v1.APIService.AddDestination is not implemented"))
}

func (UnimplementedAPIServiceHandler) UpdateDestination(context.Context, *connect.Request[v1.UpdateDestinationRequest]) (*connect.Response[v1.UpdateDestinationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internalapi.v1.APIService.UpdateDestination is not implemented"))
}

func (UnimplementedAPIServiceHandler) RemoveDestination(context.Context, *connect.Request[v1.RemoveDestinationRequest]) (*connect.Response[v1.RemoveDestinationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internalapi.v1.APIService.RemoveDestination is not implemented"))
}

func (UnimplementedAPIServiceHandler) StartDestination(context.Context, *connect.Request[v1.StartDestinationRequest]) (*connect.Response[v1.StartDestinationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internalapi.v1.APIService.StartDestination is not implemented"))
}

func (UnimplementedAPIServiceHandler) StopDestination(context.Context, *connect.Request[v1.StopDestinationRequest]) (*connect.Response[v1.StopDestinationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("internalapi.v1.APIService.StopDestination is not implemented"))
}
