// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: api.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InternalAPI_Communicate_FullMethodName       = "/api.InternalAPI/Communicate"
	InternalAPI_ListDestinations_FullMethodName  = "/api.InternalAPI/ListDestinations"
	InternalAPI_AddDestination_FullMethodName    = "/api.InternalAPI/AddDestination"
	InternalAPI_UpdateDestination_FullMethodName = "/api.InternalAPI/UpdateDestination"
	InternalAPI_RemoveDestination_FullMethodName = "/api.InternalAPI/RemoveDestination"
	InternalAPI_StartDestination_FullMethodName  = "/api.InternalAPI/StartDestination"
	InternalAPI_StopDestination_FullMethodName   = "/api.InternalAPI/StopDestination"
)

// InternalAPIClient is the client API for InternalAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalAPIClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Envelope, Envelope], error)
	ListDestinations(ctx context.Context, in *ListDestinationsRequest, opts ...grpc.CallOption) (*ListDestinationsResponse, error)
	AddDestination(ctx context.Context, in *AddDestinationRequest, opts ...grpc.CallOption) (*AddDestinationResponse, error)
	UpdateDestination(ctx context.Context, in *UpdateDestinationRequest, opts ...grpc.CallOption) (*UpdateDestinationResponse, error)
	RemoveDestination(ctx context.Context, in *RemoveDestinationRequest, opts ...grpc.CallOption) (*RemoveDestinationResponse, error)
	StartDestination(ctx context.Context, in *StartDestinationRequest, opts ...grpc.CallOption) (*StartDestinationResponse, error)
	StopDestination(ctx context.Context, in *StopDestinationRequest, opts ...grpc.CallOption) (*StopDestinationResponse, error)
}

type internalAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalAPIClient(cc grpc.ClientConnInterface) InternalAPIClient {
	return &internalAPIClient{cc}
}

func (c *internalAPIClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Envelope, Envelope], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InternalAPI_ServiceDesc.Streams[0], InternalAPI_Communicate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Envelope, Envelope]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InternalAPI_CommunicateClient = grpc.BidiStreamingClient[Envelope, Envelope]

func (c *internalAPIClient) ListDestinations(ctx context.Context, in *ListDestinationsRequest, opts ...grpc.CallOption) (*ListDestinationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDestinationsResponse)
	err := c.cc.Invoke(ctx, InternalAPI_ListDestinations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) AddDestination(ctx context.Context, in *AddDestinationRequest, opts ...grpc.CallOption) (*AddDestinationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDestinationResponse)
	err := c.cc.Invoke(ctx, InternalAPI_AddDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) UpdateDestination(ctx context.Context, in *UpdateDestinationRequest, opts ...grpc.CallOption) (*UpdateDestinationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDestinationResponse)
	err := c.cc.Invoke(ctx, InternalAPI_UpdateDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) RemoveDestination(ctx context.Context, in *RemoveDestinationRequest, opts ...grpc.CallOption) (*RemoveDestinationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDestinationResponse)
	err := c.cc.Invoke(ctx, InternalAPI_RemoveDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) StartDestination(ctx context.Context, in *StartDestinationRequest, opts ...grpc.CallOption) (*StartDestinationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartDestinationResponse)
	err := c.cc.Invoke(ctx, InternalAPI_StartDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalAPIClient) StopDestination(ctx context.Context, in *StopDestinationRequest, opts ...grpc.CallOption) (*StopDestinationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopDestinationResponse)
	err := c.cc.Invoke(ctx, InternalAPI_StopDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalAPIServer is the server API for InternalAPI service.
// All implementations must embed UnimplementedInternalAPIServer
// for forward compatibility.
type InternalAPIServer interface {
	Communicate(grpc.BidiStreamingServer[Envelope, Envelope]) error
	ListDestinations(context.Context, *ListDestinationsRequest) (*ListDestinationsResponse, error)
	AddDestination(context.Context, *AddDestinationRequest) (*AddDestinationResponse, error)
	UpdateDestination(context.Context, *UpdateDestinationRequest) (*UpdateDestinationResponse, error)
	RemoveDestination(context.Context, *RemoveDestinationRequest) (*RemoveDestinationResponse, error)
	StartDestination(context.Context, *StartDestinationRequest) (*StartDestinationResponse, error)
	StopDestination(context.Context, *StopDestinationRequest) (*StopDestinationResponse, error)
	mustEmbedUnimplementedInternalAPIServer()
}

// UnimplementedInternalAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInternalAPIServer struct{}

func (UnimplementedInternalAPIServer) Communicate(grpc.BidiStreamingServer[Envelope, Envelope]) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}
func (UnimplementedInternalAPIServer) ListDestinations(context.Context, *ListDestinationsRequest) (*ListDestinationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDestinations not implemented")
}
func (UnimplementedInternalAPIServer) AddDestination(context.Context, *AddDestinationRequest) (*AddDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDestination not implemented")
}
func (UnimplementedInternalAPIServer) UpdateDestination(context.Context, *UpdateDestinationRequest) (*UpdateDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDestination not implemented")
}
func (UnimplementedInternalAPIServer) RemoveDestination(context.Context, *RemoveDestinationRequest) (*RemoveDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDestination not implemented")
}
func (UnimplementedInternalAPIServer) StartDestination(context.Context, *StartDestinationRequest) (*StartDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDestination not implemented")
}
func (UnimplementedInternalAPIServer) StopDestination(context.Context, *StopDestinationRequest) (*StopDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDestination not implemented")
}
func (UnimplementedInternalAPIServer) mustEmbedUnimplementedInternalAPIServer() {}
func (UnimplementedInternalAPIServer) testEmbeddedByValue()                     {}

// UnsafeInternalAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalAPIServer will
// result in compilation errors.
type UnsafeInternalAPIServer interface {
	mustEmbedUnimplementedInternalAPIServer()
}

func RegisterInternalAPIServer(s grpc.ServiceRegistrar, srv InternalAPIServer) {
	// If the following call pancis, it indicates UnimplementedInternalAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InternalAPI_ServiceDesc, srv)
}

func _InternalAPI_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InternalAPIServer).Communicate(&grpc.GenericServerStream[Envelope, Envelope]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InternalAPI_CommunicateServer = grpc.BidiStreamingServer[Envelope, Envelope]

func _InternalAPI_ListDestinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDestinationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).ListDestinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalAPI_ListDestinations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).ListDestinations(ctx, req.(*ListDestinationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_AddDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).AddDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalAPI_AddDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).AddDestination(ctx, req.(*AddDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_UpdateDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).UpdateDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalAPI_UpdateDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).UpdateDestination(ctx, req.(*UpdateDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_RemoveDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).RemoveDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalAPI_RemoveDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).RemoveDestination(ctx, req.(*RemoveDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_StartDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).StartDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalAPI_StartDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).StartDestination(ctx, req.(*StartDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalAPI_StopDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalAPIServer).StopDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternalAPI_StopDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalAPIServer).StopDestination(ctx, req.(*StopDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalAPI_ServiceDesc is the grpc.ServiceDesc for InternalAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.InternalAPI",
	HandlerType: (*InternalAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDestinations",
			Handler:    _InternalAPI_ListDestinations_Handler,
		},
		{
			MethodName: "AddDestination",
			Handler:    _InternalAPI_AddDestination_Handler,
		},
		{
			MethodName: "UpdateDestination",
			Handler:    _InternalAPI_UpdateDestination_Handler,
		},
		{
			MethodName: "RemoveDestination",
			Handler:    _InternalAPI_RemoveDestination_Handler,
		},
		{
			MethodName: "StartDestination",
			Handler:    _InternalAPI_StartDestination_Handler,
		},
		{
			MethodName: "StopDestination",
			Handler:    _InternalAPI_StopDestination_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communicate",
			Handler:       _InternalAPI_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
