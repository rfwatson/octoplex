// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.30.1
// source: api.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InternalAPIClient is the client API for InternalAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalAPIClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (InternalAPI_CommunicateClient, error)
}

type internalAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalAPIClient(cc grpc.ClientConnInterface) InternalAPIClient {
	return &internalAPIClient{cc}
}

func (c *internalAPIClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (InternalAPI_CommunicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &InternalAPI_ServiceDesc.Streams[0], "/api.InternalAPI/Communicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &internalAPICommunicateClient{stream}
	return x, nil
}

type InternalAPI_CommunicateClient interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ClientStream
}

type internalAPICommunicateClient struct {
	grpc.ClientStream
}

func (x *internalAPICommunicateClient) Send(m *Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *internalAPICommunicateClient) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InternalAPIServer is the server API for InternalAPI service.
// All implementations must embed UnimplementedInternalAPIServer
// for forward compatibility
type InternalAPIServer interface {
	Communicate(InternalAPI_CommunicateServer) error
	mustEmbedUnimplementedInternalAPIServer()
}

// UnimplementedInternalAPIServer must be embedded to have forward compatible implementations.
type UnimplementedInternalAPIServer struct {
}

func (UnimplementedInternalAPIServer) Communicate(InternalAPI_CommunicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}
func (UnimplementedInternalAPIServer) mustEmbedUnimplementedInternalAPIServer() {}

// UnsafeInternalAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalAPIServer will
// result in compilation errors.
type UnsafeInternalAPIServer interface {
	mustEmbedUnimplementedInternalAPIServer()
}

func RegisterInternalAPIServer(s grpc.ServiceRegistrar, srv InternalAPIServer) {
	s.RegisterService(&InternalAPI_ServiceDesc, srv)
}

func _InternalAPI_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InternalAPIServer).Communicate(&internalAPICommunicateServer{stream})
}

type InternalAPI_CommunicateServer interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type internalAPICommunicateServer struct {
	grpc.ServerStream
}

func (x *internalAPICommunicateServer) Send(m *Envelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *internalAPICommunicateServer) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InternalAPI_ServiceDesc is the grpc.ServiceDesc for InternalAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.InternalAPI",
	HandlerType: (*InternalAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communicate",
			Handler:       _InternalAPI_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
